generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Guest {
  guestId       Int      @id @default(autoincrement())
  guestName     String
  contactNumber String
  email         String   @unique
  roomNumber    String
  checkInDate   DateTime
  checkOutDate  DateTime
  nation        String

  accusations  Accusation?
  bookings     Booking[]
  payments     Payment[]
  ServiceUsage ServiceUsage[]
}

model Accusation {
  accusationId Int    @id @default(autoincrement())
  reportType   String
  guestId      Int    @unique
  description  String

  guest Guest @relation(fields: [guestId], references: [guestId])
}

model Room {
  roomNumber    String  @id
  roomType      String
  selectedImage String
  hallFloor     Int
  price         Decimal
  status        String

  bookings      Booking[]
  payments      Payment[]
  houseKeepings HouseKeeping[]
}

model HouseKeeping {
  houseKeepingId Int      @id @default(autoincrement())
  roomNumber     String
  cleaningDate   DateTime
  status         String
  specialTasks   String
  empId          Int

  room Room @relation(fields: [roomNumber], references: [roomNumber])
}

model Payment {
  paymentId         Int      @id @default(autoincrement())
  guestId           Int
  roomNumber        String
  guestName         String
  checkInDate       DateTime
  checkOutDate      DateTime
  totalNight        Int
  roomPerNight      Decimal
  additionalCharges Decimal
  paymentMethod     String
  cashReceive       Decimal
  createdAt         DateTime @default(now())

  guest            Guest    @relation(fields: [guestId], references: [guestId])
  room             Room     @relation(fields: [roomNumber], references: [roomNumber])
  Booking          Booking? @relation(fields: [bookingBookingID], references: [bookingID])
  bookingBookingID Int?
}

model Booking {
  bookingID     Int           @id @default(autoincrement())
  guestID       Int
  roomNumber    String
  checkInDate   DateTime
  checkOutDate  DateTime
  totalAmount   Decimal
  totalNight    Int
  bookingStatus BookingStatus @default(Confirmed)
  createdAt     DateTime      @default(now())

  Guest         Guest          @relation(fields: [guestID], references: [guestId])
  Room          Room           @relation(fields: [roomNumber], references: [roomNumber])
  Payments      Payment[]
  ServiceUsages ServiceUsage[]
}

enum BookingStatus {
  Confirmed
  Cancelled
  CheckedOut
}

model Service {
  serviceID    Int      @id @default(autoincrement())
  serviceName  String
  servicePrice Decimal
  description  String?
  createdAt    DateTime @default(now())

  serviceUsages ServiceUsage[]
}

model ServiceUsage {
  usageID   Int      @id @default(autoincrement())
  bookingID Int
  guestId   Int
  serviceID Int
  quantity  Int
  totalCost Decimal
  usageDate DateTime @default(now())

  Booking Booking @relation(fields: [bookingID], references: [bookingID])
  Service Service @relation(fields: [serviceID], references: [serviceID])
  Guest   Guest   @relation(fields: [guestId], references: [guestId])
}
