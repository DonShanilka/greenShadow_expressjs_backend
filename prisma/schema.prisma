// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Change to "postgresql" or "sqlite" if needed
  url      = env("DATABASE_URL")
}

model Guest {
  guestId       Int     @id @default(autoincrement())
  guestName     String
  contactNumber String
  email         String  @unique
  roomNumber    String
  checkInDate   DateTime
  checkOutDate  DateTime
  nation        String

  accusations   Accusation?
  bookings      Booking[]
  payments      Payment[]
}

model Accusation {
  accusationId Int    @id @default(autoincrement())
  reportType   String
  guestId      Int    @unique
  description  String

  guest        Guest  @relation(fields: [guestId], references: [guestId])
}

model Room {
  roomNumber   String  @id
  roomType     String
  selectedImage String
  hallFloor    Int
  price        Decimal(10,2)
  status       String

  bookings     Booking[]
  payments     Payment[]
  houseKeepings HouseKeeping[]
}

model HouseKeeping {
  houseKeepingId Int     @id @default(autoincrement())
  roomNumber     String
  cleaningDate   DateTime
  status         String
  specialTasks   String

  room           Room    @relation(fields: [roomNumber], references: [roomNumber])
}

model Payment {
  paymentId         Int     @id @default(autoincrement())
  guestId           Int
  roomNumber        String
  guestName         String
  checkInDate       DateTime
  checkOutDate      DateTime
  totalNight        Int
  roomPerNight      Decimal(10,2)
  additionalCharges Decimal(10,2)
  paymentMethod     String
  cashReceive       Decimal(10,2)
  createdAt         DateTime @default(now())

  guest             Guest   @relation(fields: [guestId], references: [guestId])
  room              Room    @relation(fields: [roomNumber], references: [roomNumber])
}

model Booking {
  bookingID     Int     @id @default(autoincrement())
  guestID       Int
  roomNumber    String
  checkInDate   DateTime
  checkOutDate  DateTime
  totalAmount   Decimal(10,2)
  totalNight    Int
  bookingStatus BookingStatus @default(Confirmed)
  createdAt     DateTime @default(now())

  Guest         Guest  @relation(fields: [guestID], references: [guestId])
  Room          Room   @relation(fields: [roomNumber], references: [roomNumber])
  Payments      Payment[]
  ServiceUsages ServiceUsage[]
}

enum BookingStatus {
  Confirmed
  Cancelled
  CheckedOut
}

model Service {
  serviceID   Int    @id @default(autoincrement())
  serviceName String
  servicePrice Decimal(10,2)
  description String?
  createdAt   DateTime @default(now())

  serviceUsages ServiceUsage[]
}

model ServiceUsage {
  usageID    Int     @id @default(autoincrement())
  bookingID  Int
  guestId    Int
  serviceID  Int
  quantity   Int
  totalCost  Decimal(10,2)
  usageDate  DateTime @default(now())

  Booking    Booking @relation(fields: [bookingID], references: [bookingID])
  Service    Service @relation(fields: [serviceID], references: [serviceID])
  Guest      Guest   @relation(fields: [guestId], references: [guestId])
}
